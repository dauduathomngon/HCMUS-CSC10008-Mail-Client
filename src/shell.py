import os
from cmd import Cmd
from tkinter import filedialog
from datetime import datetime
from email.utils import make_msgid
from email.mime.multipart import MIMEMultipart
import time
from smtp import SMTP
from pop3 import POP3
from utils import *

ROOT.withdraw()

class Shell(Cmd):
    def __init__(self, config_path) -> None:
        super(Shell, self).__init__()

        # ƒë·ªçc file confg
        self.general_config = process_general(read_config(config_path)["General"])
        self.filter_config = read_config(config_path)["Filter"]

        # t·∫°o cwd = ""
        self.cwd = "~"
        self.__update_prompt()

        # k·∫øt n·ªëi smtp v√† pop3
        self.__connect_smtp()
        self.__connect_pop3()

        self.download_mail_thread = threading.Thread(target=self.__get_all_mail)
        self.download_mail_thread.daemon = True  # ƒê·∫£m b·∫£o lu·ªìng k·∫øt th√∫c khi ch∆∞∆°ng tr√¨nh ch√≠nh k·∫øt th√∫c
        self.download_mail_thread.start()

    def __update_prompt(self):
        time_now = datetime.now()
        Shell.prompt = f"({time_now.hour}:{time_now.minute}) C·∫≠u ƒëang ·ªü [{self.cwd}] > "

    def __connect_smtp(self):
        # t·∫°o smtp 
        self.smtp = SMTP(self.general_config["MailServer"],
                         self.general_config["SMTP"],
                         debug=False)
        # sau ƒë√≥ connect v·ªõi server
        self.smtp.connect()

    def __connect_pop3(self):
        # t·∫°o pop3
        self.pop3 = POP3(self.general_config["MailServer"],
                         self.general_config["POP3"],
                         self.general_config["Mail"],
                         self.general_config["Password"],
                         self.filter_config,
                         debug=False) 
        # connect v·ªõi server
        self.pop3.connect()

    # t·∫£i t·∫•t c·∫£ mail tr√™n server
    def __get_all_mail(self):
        while True:
            with LOCK:
                self.grp_mail_lst = self.pop3.download_emails(self.pop3.user_, self.pop3.passwrd_)
            time.sleep(self.general_config["Autoload"])

    # ƒë√≥ng shell
    def __close(self):
        if self.smtp:
            self.smtp.close()
        if self.pop3:
            self.pop3.close()

    # tho√°t shell
    def do_exit(self, arg):
        self.__close()
        return True

    # clear m√†n h√¨nh
    def do_clear(self, arg):
        os.system("cls")

    # xu·∫•t ra th√¥ng tin help
    def do_help(self, arg):
        print_greeting(again=True)

    # li·ªát k√™ ra c√°c filter c√≥ trong mailbox
    def do_ls(self, arg):
        # n·∫øu v·∫´n ƒëang ·ªü root => b·∫Øt ch·ªçn filter tr∆∞·ªõc
        if self.cwd == "~":
            for filter in self.grp_mail_lst:
                CONSOLE.print(f"üìÇ {filter} ")
        else:
            # ƒë·∫∑t lock ƒë·ªÉ tr√°nh tr∆∞·ªùng h·ª£p ƒëang in danh s√°ch mail th√¨ h·ªá th·ªëng down mail v·ªÅ => l·ªói
            with LOCK:
                i = 0
                #Duy·ªát qua t·ª´ng mail trong filter (ƒë∆∞·ª£c l∆∞u ·ªü cwd)
                for email in self.grp_mail_lst[self.cwd]:
                    i += 1
                    if email["Read Status"] == 0:
                        CONSOLE.print(f"[{i}]üìß [purple][CH∆ØA ƒê·ªåC][/purple] NG∆Ø·ªúI G·ª¨I: {email["From"]} || TI√äU ƒê·ªÄ: {email["Subject"]}")
                    else:
                        CONSOLE.print(f"[{i}]üìß NG∆Ø·ªúI G·ª¨I: {email["From"]} || TI√äU ƒê·ªÄ: {email["Subject"]}")

    # tr·ªè ƒë·∫øn 1 th∆∞ m·ª•c filter
    def do_cd(self, arg):
        if arg in self.grp_mail_lst:
            self.cwd = arg
            self.__update_prompt()
        elif arg == "..":
            self.cwd = "~"
            self.__update_prompt()
        else:
            CONSOLE.print("Kh√¥ng t·ªìn t·∫°i th∆∞ m·ª•c: ", arg + "")

    # ƒë·ªçc mail
    def do_read(self, arg):
        with LOCK:
            # x·ª≠ l√≠ input ƒë·∫ßu v√†o
            arg = int(arg)
            if not arg:
                CONSOLE.print("Ch·ªâ m·ª•c c·ªßa email ph·∫£i l√† s·ªë, c√∫ ph√°p ƒë√∫ng: read ch·ªâ_m·ª•c_email_c·∫ßn_ƒë·ªçc ")
            elif self.cwd == "root":
                CONSOLE.print("C·∫ßn ch·ªçn th∆∞ m·ª•c c·∫ßn ƒë·ªçc mail tr∆∞·ªõc. S·ª≠ d·ª•ng cd t√™n_th∆∞_m·ª•c ")
            elif arg < 1 or arg > len(self.grp_mail_lst[self.cwd]):
                CONSOLE.print("Ch·ªâ m·ª•c kh√¥ng h·ª£p l·ªá! Ch·ªâ m·ª•c ph·∫£i thu·ªôc kho·∫£ng 0 -> ", len(self.grp_mail_lst[self.cwd]),"")
            else:
                # ƒë·ªïi tr·∫°ng th√°i c·ªßa mail id.txt trong mailbox
                self.pop3.read_email(self.grp_mail_lst[self.cwd][arg-1])

                # in ra t·ª´ng th√†nh ph·∫ßn c√≥ trong info
                list_info = ["From", "To", "CC", "Subject", "Content", "Attachment"]
                for info in list_info:
                    if info != "" and info != "Attachment":
                        CONSOLE.print(info,": ", self.grp_mail_lst[self.cwd][arg-1][info],"")

                    # n·∫øu l√† attachment th√¨ in ra danh s√°ch t√™n
                    elif info == "Attachment":
                        if len(self.grp_mail_lst[self.cwd][arg-1][info]) != 0:
                            CONSOLE.print("Attachment: ")
                            for attachment in self.grp_mail_lst[self.cwd][arg-1][info]:
                                name = attachment["filename"]
                                CONSOLE.print("[",name,"] ")  

                            # T·∫£i email v·ªÅ ƒë∆∞·ªùng d·∫´n
                            download = PROMPT.ask("Nh·∫≠p 1 ƒë·ªÉ t·∫£i c√°c file trong mail, 0 ƒë·ªÉ b·ªè qua: ")
                            if int(download) == 1:
                                path = filedialog.askdirectory(parent=ROOT)
                                while not os.path.exists(path):
                                    CONSOLE.print("ƒê∆∞·ªùng d·∫´n kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.")
                                    path = filedialog.askdirectory(parent=ROOT)
                                for attachment in self.grp_mail_lst[self.cwd][arg-1][info]:
                                    try:
                                        decode_base64_and_save(attachment["attachment_content"], os.path.join(path, attachment["filename"]))
                                    except:
                                        CONSOLE.print_exception()
                                        return
                    
    # th·ª±c hi·ªán vi·ªác g·ª≠i mail
    def do_sendmail(self, arg):
        # t√°ch c√°c argument ra
        arg_list = arg.split(" ")

        # t·∫°o mail
        mail = MIMEMultipart()

        # t·∫°o ng∆∞·ªùi g·ª≠i
        mail["From"] = self.general_config["Mail"]

        # nh·∫≠p mail nh·∫≠n
        to = PROMPT.ask("[cyan]ƒê·∫øn[/cyan]")
        if to == "":
            CONSOLE.print("[red](ERROR)[/red] Kh√¥ng th·ªÉ ƒë·ªÉ tr·ªëng mail nh·∫≠n")
            return
        if not check_mail_format(to):
            CONSOLE.print("[red](ERROR)[/red] ƒê·ªãnh d·∫°ng mail kh√¥ng h·ª£p l·ªá")
            return
        mail["To"] = to

        # t·∫°o cc (n·∫øu c√≥)
        if "-cc" in arg_list:
            cc = PROMPT.ask("[cyan]CC[/cyan]")
            if not check_mail_format(cc):
                CONSOLE.print("[red](ERROR)[/red] ƒê·ªãnh d·∫°ng mail kh√¥ng h·ª£p l·ªá")
                return
            mail["CC"] = cc

        # t·∫°o bcc (n·∫øu c√≥)
        if "-bcc" in arg_list:
            bcc = PROMPT.ask("[cyan]BCC[/cyan]")
            if not check_mail_format(bcc):
                CONSOLE.print("[red](ERROR)[/red] ƒê·ªãnh d·∫°ng mail kh√¥ng h·ª£p l·ªá")
                return
            mail["BCC"] = bcc

        subject = PROMPT.ask("[cyan]Ti√™u ƒë·ªÅ[/cyan]")
        if subject == "":
            CONSOLE.print("[red](ERROR)[/red] Kh√¥ng th·ªÉ ƒë·ªÉ tr·ªëng ti√™u ƒë·ªÅ")
            return
        mail["Subject"] = subject

        # t·∫°o ng√†y g·ª≠i
        mail["Date"] = datetime.now().strftime("%a, %d %b %Y %H:%M:%S")

        # t·∫°o n·ªôi dung
        content = PROMPT.ask("[cyan]N·ªôi dung[/cyan]")
        mail.attach(MIMEText(content, _subtype = "plain"))

        # t·∫°o c√°c file ƒë√≠nh k√®m
        if "-a" in arg_list:
            attachments = list(filedialog.askopenfilenames(parent=ROOT))

            # s·ªë l∆∞·ª£ng file kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n 5
            if len(attachments) > 5:
                CONSOLE.print("[red](ERROR)[/red] Kh√¥ng th·ªÉ g·ª≠i nhi·ªÅu h∆°n 5 file")
                return 

            # file kh√¥ng th·ªÉ v∆∞·ª£t qu√° 3MB
            for file in attachments:
                # ƒë∆∞a bytes v·ªÅ megabytes
                if int(os.stat(file).st_size / float(1 << 20)) > 3:
                    CONSOLE.print("[red](ERROR)[/red] Kh√¥ng th·ªÉ g·ª≠i file l·ªõn h∆°n 3MB. Vui l√≤ng ch·ªçn l·∫°i file")
                    attachments.remove(file)
                    # ch·ªçn l·∫°i file
                    new_files = list(filedialog.askopenfilenames(parent=ROOT))
                    attachments += new_files

            # in ra nh·ªØng file ƒë∆∞·ª£c ƒë√≠nh k√®m
            CONSOLE.print("[cyan]File ƒë√≠nh k√®m[/cyan]")
            for file in attachments:
                CONSOLE.print(f"\t{os.path.basename(file)}")

            # ƒë√≠nh k√®m file v√†o mail
            for file in attachments:
                mail.attach(create_file_format(file))

        # t·∫°o message ID
        mail["Message-ID"] = make_msgid()

        # ti·∫øn h√†nh g·ª≠i mail
        self.smtp.sendmail(mail)

        CONSOLE.print(f"[green](SUCCESS)[/green] ƒê√£ g·ª≠i th√†nh c√¥ng mail")